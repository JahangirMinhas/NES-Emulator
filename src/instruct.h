#ifndef INSTRUCT_H
#define INSTRUCT_H

#include <cstdint>
#include <string>
#include "cpu.h"

class instruct {
    public:
        std::string name;
        void (Cpu::*addr_mode)();
        void (Cpu::*operation)();
        uint8_t cycles;
        uint8_t bytes;
        instruct(std::string name, void (Cpu::*operation)(), void (Cpu::*addr_mode)(), uint8_t bytes, uint8_t cycles);
};

using c = Cpu;
instruct instructions[256] = {
    // Row 0
    instruct("BRK", &c::BRK, &c::IMP, 1, 7),
    instruct("ORA", &c::ORA, &c::IND_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ORA", &c::ORA, &c::ZP, 2, 3),
    instruct("ASL", &c::ASL, &c::ZP, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("PHP", &c::PHP, &c::IMP, 1, 3),
    instruct("ORA", &c::ORA, &c::IMM, 2, 2),
    instruct("ASL", &c::ASL, &c::ACC, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ORA", &c::ORA, &c::ABS, 3, 4),
    instruct("ASL", &c::ASL, &c::ABS, 3, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 1
    instruct("BPL", &c::BPL, &c::REL, 2, 2),
    instruct("ORA", &c::ORA, &c::IND_Y, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ORA", &c::ORA, &c::ZP_X, 2, 4),
    instruct("ASL", &c::ASL, &c::ZP_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CLC", &c::CLC, &c::IMP, 1, 2),
    instruct("ORA", &c::ORA, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ORA", &c::ORA, &c::ABS_X, 3, 4),
    instruct("ASL", &c::ASL, &c::ABS_X, 3, 7),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 2
    instruct("JSR", &c::JSR, &c::ABS, 3, 6),
    instruct("AND", &c::AND, &c::IND_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("BIT", &c::BIT, &c::ZP, 2, 3),
    instruct("AND", &c::AND, &c::ZP, 2, 3),
    instruct("ROL", &c::ROL, &c::ZP, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("PLP", &c::PLP, &c::IMP, 1, 4),
    instruct("AND", &c::AND, &c::IMM, 2, 2),
    instruct("ROL", &c::ROL, &c::ACC, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("BIT", &c::BIT, &c::ABS, 3, 4),
    instruct("AND", &c::AND, &c::ABS, 3, 4),
    instruct("ROL", &c::ROL, &c::ABS, 3, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 3
    instruct("BMI", &c::BMI, &c::REL, 2, 2),
    instruct("AND", &c::AND, &c::IND_Y, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("AND", &c::AND, &c::ZP_X, 2, 4),
    instruct("ROL", &c::ROL, &c::ZP_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("SEC", &c::SEC, &c::IMP, 1, 2),
    instruct("AND", &c::AND, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("AND", &c::AND, &c::ABS_X, 3, 4),
    instruct("ROL", &c::ROL, &c::ABS_X, 3, 7),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 4
    instruct("RTI", &c::RTI, &c::IMP, 1, 6),
    instruct("EOR", &c::EOR, &c::IND_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("EOR", &c::EOR, &c::ZP, 2, 3),
    instruct("LSR", &c::LSR, &c::ZP, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("PHA", &c::PHA, &c::IMP, 1, 3),
    instruct("EOR", &c::EOR, &c::IMM, 2, 2),
    instruct("LSR", &c::LSR, &c::ACC, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("JMP", &c::JMP, &c::ABS, 3, 3),
    instruct("EOR", &c::EOR, &c::ABS, 3, 4),
    instruct("LSR", &c::LSR, &c::ABS, 3, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 5
    instruct("BVC", &c::BVC, &c::REL, 2, 2),
    instruct("EOR", &c::EOR, &c::IND_Y, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("EOR", &c::EOR, &c::ZP_X, 2, 4),
    instruct("LSR", &c::LSR, &c::ZP_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CLI", &c::CLI, &c::IMP, 1, 2),
    instruct("EOR", &c::EOR, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("EOR", &c::EOR, &c::ABS_X, 3, 4),
    instruct("LSR", &c::LSR, &c::ABS_X, 3, 7),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 6
    instruct("RTS", &c::RTS, &c::IMP, 1, 6),
    instruct("ADC", &c::ADC, &c::IND_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ADC", &c::ADC, &c::ZP, 2, 3),
    instruct("ROR", &c::ROR, &c::ZP, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("PLA", &c::PLA, &c::IMP, 1, 4),
    instruct("ADC", &c::ADC, &c::IMM, 2, 2),
    instruct("ROR", &c::ROR, &c::ACC, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("JMP", &c::JMP, &c::IND, 3, 5),
    instruct("ADC", &c::ADC, &c::ABS, 3, 4),
    instruct("ROR", &c::ROR, &c::ABS, 3, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 7
    instruct("BVS", &c::BVS, &c::REL, 2, 2),
    instruct("ADC", &c::ADC, &c::IND, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ADC", &c::ADC, &c::ZP_X, 2, 4),
    instruct("ROR", &c::ROR, &c::ZP_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("SEI", &c::SEI, &c::IMP, 1, 2),
    instruct("ADC", &c::ADC, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("ADC", &c::ADC, &c::ABS_X, 3, 4),
    instruct("ROR", &c::ROR, &c::ABS_X, 3, 7),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 8
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("STA", &c::STA, &c::IND_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("STY", &c::STY, &c::ZP, 2, 3),
    instruct("STA", &c::STA, &c::ZP, 2, 3),
    instruct("STX", &c::STX, &c::ZP, 2, 3),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("DEY", &c::DEY, &c::IMP, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("TXA", &c::TXA, &c::IMP, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("STY", &c::STY, &c::ABS, 3, 4),
    instruct("STA", &c::STA, &c::ABS, 3, 4),
    instruct("STX", &c::STX, &c::ABS, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row 9
    instruct("BCC", &c::BCC, &c::REL, 2, 2),
    instruct("STA", &c::STA, &c::IND_Y, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("STY", &c::STY, &c::ZP_X, 2, 4),
    instruct("STA", &c::STA, &c::ZP_X, 2, 4),
    instruct("STX", &c::STX, &c::ZP_Y, 2, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("TYA", &c::TYA, &c::IMP, 1, 2),
    instruct("STA", &c::STA, &c::ABS_Y, 3, 5),
    instruct("TXS", &c::TXS, &c::IMP, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("STA", &c::STA, &c::ABS_X, 3, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row A
    instruct("LDY", &c::LDY, &c::IMM, 2, 2),
    instruct("LDA", &c::LDA, &c::IND_X, 2, 6),
    instruct("LDX", &c::LDX, &c::IMM, 2, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("LDY", &c::LDY, &c::ZP, 2, 3),
    instruct("LDA", &c::LDA, &c::ZP, 2, 3),
    instruct("LDX", &c::LDX, &c::ZP, 2, 3),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("TAY", &c::TAY, &c::IMP, 1, 2),
    instruct("LDA", &c::LDA, &c::IMM, 2, 2),
    instruct("TAX", &c::TAX, &c::IMP, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("LDY", &c::LDY, &c::ABS, 3, 4),
    instruct("LDA", &c::LDA, &c::ABS, 3, 4),
    instruct("LDX", &c::LDX, &c::ABS, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row B
    instruct("BCS", &c::BCS, &c::REL, 2, 2),
    instruct("LDA", &c::LDA, &c::IND_Y, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("LDY", &c::LDY, &c::ZP_X, 2, 4),
    instruct("LDA", &c::LDA, &c::ZP_X, 2, 4),
    instruct("LDX", &c::LDX, &c::ZP_Y, 2, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CLV", &c::CLV, &c::IMP, 1, 2),
    instruct("LDA", &c::LDA, &c::ABS_Y, 3, 4),
    instruct("TSX", &c::TSX, &c::IMP, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("LDY", &c::LDY, &c::ABS_X, 3, 4),
    instruct("LDA", &c::LDA, &c::ABS_X, 3, 4),
    instruct("LDX", &c::LDX, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row C
    instruct("CPY", &c::CPY, &c::IMM, 2, 2),
    instruct("CMP", &c::CMP, &c::IND_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CPY", &c::CPY, &c::ZP, 2, 3),
    instruct("CMP", &c::CMP, &c::ZP, 2, 3),
    instruct("DEC", &c::DEC, &c::ZP, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("INY", &c::INY, &c::IMP, 1, 2),
    instruct("CMP", &c::CMP, &c::IMM, 2, 2),
    instruct("DEX", &c::DEX, &c::IMP, 1, 2),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CPY", &c::CPY, &c::ABS, 3, 4),
    instruct("CMP", &c::CMP, &c::ABS, 3, 4),
    instruct("DEC", &c::DEC, &c::ABS, 3, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row D
    instruct("BNE", &c::BNE, &c::REL, 2, 2),
    instruct("CMP", &c::CMP, &c::IND_Y, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CMP", &c::CMP, &c::ZP_X, 2, 4),
    instruct("DEC", &c::DEC, &c::ZP_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CLD", &c::CLD, &c::IMP, 1, 2),
    instruct("CMP", &c::CMP, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("CMP", &c::CMP, &c::ABS_X, 3, 4),
    instruct("DEC", &c::DEC, &c::ABS_X, 3, 7),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row E
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),

    // Row F
    instruct("BEQ", &c::BEQ, &c::REL, 2, 2),
    instruct("SBC", &c::SBC, &c::IND_Y, 2, 5),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("SBC", &c::SBC, &c::ZP_X, 2, 4),
    instruct("INC", &c::INC, &c::ZP_X, 2, 6),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("SED", &c::SED, &c::IMP, 1, 2),
    instruct("SBC", &c::SBC, &c::ABS_Y, 3, 4),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
    instruct("SBC", &c::SBC, &c::ABS_X, 3, 4),
    instruct("INC", &c::INC, &c::ABS_X, 3, 7),
    instruct("NOP", &c::NOP, &c::NOP, 0, 0),
};
#endif